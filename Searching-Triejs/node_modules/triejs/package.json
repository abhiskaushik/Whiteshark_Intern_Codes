{
  "name": "triejs",
  "version": "0.1.5",
  "author": {
    "name": "Paul Thurlow"
  },
  "description": "Customizable trie data structure built in JavaScript.",
  "keywords": [
    "trie",
    "autocomplete",
    "dictionary",
    "type ahead"
  ],
  "homepage": "http://pthurlow.github.com/triejs",
  "contibutors": [],
  "dependencies": {
    "foounit": ""
  },
  "scripts": {
    "test": "node tests/vendor/suite.js"
  },
  "main": "src/trie.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/pthurlow/triejs.git"
  },
  "devDependencies": {},
  "engines": {
    "node": "*"
  },
  "readme": "#Triejs [![Build Status](https://secure.travis-ci.org/pthurlow/triejs.png)](http://travis-ci.org/pthurlow/triejs)\nA Javascript implementation of a trie data structure with an extensible data \nmodel to easily customize to any need.  Visit the [Triejs page](http://pthurlow.github.com/triejs) for more info and technical details.\n\n##Usage\n\nYou can choose to drop Triejs into your project several ways.  You can download the raw source and add it via a script tag in your html.  Or if\nyou plan on using it in a node project you can install it via `npm install triejs`\n\n###Basic\nCreating a trie is as easy as creating a new object:\n\n    > var Triejs = require('triejs');\n    > var trie = new Triejs();\n\nTo add a word with some data associated it call `add`:\n\n    > trie.add(<word>, <data>);\n\nNow given any prefix of letters, you can return results possible words using `find`:\n\n    > trie.find(<word>);\n      => <data>\n\n###Advanced\n\nTo customize the data just pass optional data, including functions to support data manipulation.  These \ninclude `sort` to sort data being entered, `insert` to customize how data is input, `copy` for moving data \nbetween nodes in the trie, and `clip` for removing data from the cache layer if it grows too big.\n\n####Example\n\nOptions are passed via the constructor as a hash like so:\n\n    var trie = new Triejs({\n      // sort the data in the context 'this'\n      sort: function() {\n        this.sort(function(a, b) {\n          return b.rank - a.rank;\n        });\n      }\n      // insert data into the target\n      , insert: function(target, data) {\n        // override for non array implementation\n      }\n      // clip the data in the context 'this' to length max\n      , clip: function(max) {\n        this.splice(0, this.length - max);\n      }\n      // return a copy of data\n      , copy: function(data) {\n        // override and return new data for non array implementation\n      }\n      // merge data into target and return target\n      , merge: function(target, data) {\n        // override and return target with data merged in\n      }\n    });\n\n##Testing\n\nThe test suite is built using [Bob Remeika's foounit](https://github.com/foobarfighter/foounit) and can be tested in both the browser and in node.\nTo test in node simple run the following command `node tests/vendor/suite.js` in the root directory or if Triejs was installed using `npm` then run `npm test`\n\nTo test in a browser you will need to `npm install` and then run `foounit serve` in the root directory.  Then you can direct your browser\nto `localhost:5057/tests/vendor/runner.html` to see the test suite run\n\n##License\n\nTriejs is licensed under the [MIT License](http://www.opensource.org/licenses/mit-license.php) copyright (c) 2012 Paul Thurlow\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/pthurlow/triejs/issues"
  },
  "_id": "triejs@0.1.5",
  "_from": "triejs@"
}
